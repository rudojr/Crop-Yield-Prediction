import streamlit as st
import pandas as pd
import numpy as np
import os
import joblib
import tensorflow as tf
from tensorflow.keras.models import load_model
import matplotlib.pyplot as plt
import seaborn as sns


def load_models(crop):
    safe_crop = crop.replace(" ", "_").replace("/", "_")
    crop_dir = os.path.join("save_models", safe_crop)

    lstm_model_path = os.path.join(crop_dir, "lstm_model.keras")
    lstm_embedding_path = os.path.join(crop_dir, "lstm_embedding_model.keras")
    xgb_model_path = os.path.join(crop_dir, "xgb_model.pkl")
    scaler_path = os.path.join(crop_dir, "scaler.save")

    if not all(os.path.exists(p) for p in [lstm_model_path, lstm_embedding_path, xgb_model_path, scaler_path]):
        return None, None, None, None

    lstm_model = tf.keras.models.load_model(lstm_model_path)
    lstm_embedding_model = tf.keras.models.load_model(lstm_embedding_path)
    xgb_model = joblib.load(xgb_model_path)
    scaler = joblib.load(scaler_path)

    return lstm_model, lstm_embedding_model, xgb_model, scaler


def predict_yield(crop, state, season, area, rainfall, fertilizer, pesticide, lstm_embedding_model, xgb_model, scaler):

    seq_data = np.array([[rainfall, fertilizer, pesticide]] * 3).reshape(1, 3, 3)

    seq_data_flat = seq_data.reshape(-1, seq_data.shape[-1])
    seq_data_scaled = scaler.transform(seq_data_flat).reshape(seq_data.shape)


    df = pd.read_csv("data.csv")  # ƒê·ªçc file d·ªØ li·ªáu g·ªëc
    df_sample = df[df['Crop'] == crop].copy()
    df_sample = pd.get_dummies(df_sample, columns=['Season', 'State'], drop_first=True)

    state_cols = [col for col in df_sample.columns if col.startswith('State_')]
    season_cols = [col for col in df_sample.columns if col.startswith('Season_')]

    static_data = np.zeros(len(state_cols) + len(season_cols) + 1)  # +1 cho Area

    static_data[-1] = area

    for i, col in enumerate(state_cols):
        state_name = col.replace('State_', '')
        if state_name == state:
            static_data[i] = 1
            break

    offset = len(state_cols)
    for i, col in enumerate(season_cols):
        season_name = col.replace('Season_', '')
        if season_name == season:
            static_data[offset + i] = 1
            break

    lstm_embedding = lstm_embedding_model.predict(seq_data_scaled)

    xgb_input = np.concatenate([lstm_embedding, static_data.reshape(1, -1)], axis=1)

    prediction = xgb_model.predict(xgb_input)[0]

    return prediction


def load_historical_data(crop, state, season):
    df = pd.read_csv("data.csv")
    filtered_df = df[(df['Crop'] == crop) & (df['State'] == state) & (df['Season'] == season)].sort_values('Crop_Year')
    return filtered_df


st.title("üåæ D·ª± ƒëo√°n nƒÉng su·∫•t n√¥ng s·∫£n (Yield Prediction)")

try:
    df = pd.read_csv("data.csv")
    crop_list = df["Crop"].unique()
    season_list = df["Season"].unique()
    state_list = df["State"].unique()
except Exception as e:
    st.error(f"L·ªói khi t·∫£i d·ªØ li·ªáu: {e}")
    st.stop()

col1, col2 = st.columns([2, 1])

with col1:
    st.subheader("Th√¥ng s·ªë ƒë·∫ßu v√†o")

    crop_name = st.selectbox("Ch·ªçn lo·∫°i c√¢y tr·ªìng (Crop)", crop_list)
    lstm_model, embedding_model, xgb_model, scaler = load_models(crop_name)

    if lstm_model is None:
        st.error(f"Kh√¥ng t√¨m th·∫•y m√¥ h√¨nh cho {crop_name}. Vui l√≤ng ch·ªçn lo·∫°i c√¢y tr·ªìng kh√°c.")
        st.stop()

    state = st.selectbox("Ch·ªçn Bang/Th√†nh ph·ªë (State)", state_list)
    season = st.selectbox("Ch·ªçn M√πa v·ª• (Season)", season_list)

    area = st.number_input("Di·ªán t√≠ch gieo tr·ªìng (Area - ha)", min_value=0.0, value=1.0)
    annual_rainfall = st.number_input("L∆∞·ª£ng m∆∞a trung b√¨nh h√†ng nƒÉm (mm)", min_value=0.0, value=800.0)
    fertilizer = st.number_input("L∆∞·ª£ng ph√¢n b√≥n (kg)", min_value=0.0, value=50.0)
    pesticide = st.number_input("L∆∞·ª£ng thu·ªëc tr·ª´ s√¢u (kg)", min_value=0.0, value=10.0)

    if st.button("D·ª± ƒëo√°n"):
        with st.spinner('ƒêang t√≠nh to√°n...'):
            try:
                prediction = predict_yield(
                    crop_name, state, season, area, annual_rainfall,
                    fertilizer, pesticide, embedding_model, xgb_model, scaler
                )

                st.success(f"NƒÉng su·∫•t d·ª± ƒëo√°n: {prediction:.2f}")

                st.subheader("So s√°nh v·ªõi d·ªØ li·ªáu l·ªãch s·ª≠")
                historical_data = load_historical_data(crop_name, state, season)

                if not historical_data.empty:
                    fig, ax = plt.subplots(figsize=(10, 6))
                    years = historical_data['Crop_Year'].tolist()
                    yields = historical_data['Yield'].tolist()

                    ax.plot(years, yields, marker='o', linestyle='-', color='blue', label='NƒÉng su·∫•t l·ªãch s·ª≠')

                    current_year = max(years) + 1 if years else 2025
                    ax.scatter([current_year], [prediction], color='red', s=100, label='D·ª± ƒëo√°n')
                    ax.plot([years[-1], current_year], [yields[-1], prediction], 'r--')

                    ax.set_xlabel('NƒÉm')
                    ax.set_ylabel('NƒÉng su·∫•t (t·∫•n/ha)')
                    ax.set_title(f'NƒÉng su·∫•t {crop_name} t·∫°i {state} v√†o m√πa {season}')
                    ax.grid(True)
                    ax.legend()

                    st.pyplot(fig)
                else:
                    st.info("Kh√¥ng c√≥ d·ªØ li·ªáu l·ªãch s·ª≠ cho s·ª± k·∫øt h·ª£p n√†y.")
            except Exception as e:
                st.error(f"L·ªói khi d·ª± ƒëo√°n: {e}")

with col2:
    st.subheader("Th√¥ng tin m√¥ h√¨nh")
    st.info(f"""
    Th√¥ng tin v·ªÅ m√¥ h√¨nh d·ª± ƒëo√°n cho {crop_name}:

    - S·ª≠ d·ª•ng m√¥ h√¨nh lai k·∫øt h·ª£p gi·ªØa LSTM v√† XGBoost
    - LSTM x·ª≠ l√Ω d·ªØ li·ªáu chu·ªói th·ªùi gian (3 nƒÉm)
    - XGBoost k·∫øt h·ª£p ƒë·∫∑c tr∆∞ng chu·ªói th·ªùi gian v√† ƒë·∫∑c tr∆∞ng tƒ©nh
    """)

    st.subheader("H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng")
    st.info("""
    1. Ch·ªçn lo·∫°i c√¢y tr·ªìng c·∫ßn d·ª± ƒëo√°n
    2. Ch·ªçn V√πng/Bang v√† M√πa v·ª•
    3. Nh·∫≠p di·ªán t√≠ch canh t√°c
    4. Nh·∫≠p th√¥ng s·ªë v·ªÅ l∆∞·ª£ng m∆∞a, ph√¢n b√≥n v√† thu·ªëc tr·ª´ s√¢u
    5. Nh·∫•n n√∫t D·ª± ƒëo√°n ƒë·ªÉ xem k·∫øt qu·∫£
    """)